{
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "project": "./tsconfig.json"
    },
    "env": {
        "browser": false,
        "node": true,
        "es6": true
    },
    "plugins": [
        "@typescript-eslint", "jsdoc", "jsdoc-typescript"
    ],
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/eslint-recommended"
    ],
    "ignorePatterns": [
        "coverage",
        "src/fast-deep-equal.js",
        "test/zora/fixtures"
    ],
    "rules": {
        "no-unused-vars": "off",
        "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],

        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-ignore": "error",
        "@typescript-eslint/ban-types": [
            "error",
            {
                "types": {
                    "Object": {
                        "message": "Avoid using the `Object` type. Did you mean `object`?"
                    },
                    "Function": {
                        "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
                    },
                    "Boolean": {
                        "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
                    },
                    "Number": {
                        "message": "Avoid using the `Number` type. Did you mean `number`?"
                    },
                    "String": {
                        "message": "Avoid using the `String` type. Did you mean `string`?"
                    },
                    "Symbol": {
                        "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
                    }
                }
            }
        ],
        "@typescript-eslint/class-name-casing": "off",
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/explicit-member-accessibility": [
            "error",
            {
                "accessibility": "no-public"
            }
        ],
        "@typescript-eslint/indent": "off",
        "@typescript-eslint/interface-name-prefix": "error",
        "@typescript-eslint/member-delimiter-style": [
            "error",
            {
                "multiline": {
                    "delimiter": "semi",
                    "requireLast": true
                },
                "singleline": {
                    "delimiter": "semi",
                    "requireLast": false
                }
            }
        ],
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-extraneous-class": "error",
        "@typescript-eslint/no-floating-promises": "error",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-param-reassign": "off",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-this-alias": "off",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "off",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/quotes": "off",
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/triple-slash-reference": [
            "off",
            {
                "path": "always",
                "types": "prefer-import",
                "lib": "always"
            }
        ],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/unified-signatures": "error",

        "jsdoc-typescript/require-class-field": "error",

        "jsdoc/check-alignment": "error",
        "jsdoc/check-indentation": "off",
        "jsdoc/newline-after-description": "error",
        "jsdoc/no-types": "off",
        "jsdoc/require-jsdoc": [
            "error",
            {
                "publicOnly": false,
                "require": {
                    "FunctionDeclaration": true,
                    "FunctionExpression": true,
                    "MethodDefinition": true,
                    "ClassExpression": true,
                    "ClassDeclaration": true
                }
            }
        ],
        "jsdoc/require-property": "error",
        "jsdoc/require-property-type": "error",
        "jsdoc/require-returns": [
            "error",
            {
                "forceRequireReturn": true,
                "forceReturnsWithAsync": true
            }
        ],
        "jsdoc/require-returns-type": "error"


        // "@typescript-eslint/adjacent-overload-signatures": "error",
        // "@typescript-eslint/array-type": "error",

        // "camelcase": "off",
        // "@typescript-eslint/camelcase": ["error", { "properties": "never", "allow": ["^[A-Za-z][a-zA-Za-z]+_[A-Za-z]+$"] }],

        // "@typescript-eslint/class-name-casing": "error",
        // "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
        // "@typescript-eslint/interface-name-prefix": "error",
        // "@typescript-eslint/no-inferrable-types": "error",
        // "@typescript-eslint/no-misused-new": "error",
        // "@typescript-eslint/no-this-alias": "error",

        // "no-unused-expressions": "off",
        // "@typescript-eslint/no-unused-expressions": ["error", { "allowTernary": true }],

        // "@typescript-eslint/prefer-for-of": "error",
        // "@typescript-eslint/prefer-function-type": "error",
        // "@typescript-eslint/prefer-namespace-keyword": "error",

        // "quotes": "off",
        // "@typescript-eslint/quotes": ["error", "double", { "avoidEscape": true, "allowTemplateLiterals": true }],

        // "semi": "off",
        // "@typescript-eslint/semi": "error",

        // "space-before-function-paren": "off",
        // "@typescript-eslint/space-before-function-paren": ["error", {
        //     "asyncArrow": "always",
        //     "anonymous": "always",
        //     "named": "never"
        // }],

        // "@typescript-eslint/triple-slash-reference": "error",
        // "@typescript-eslint/type-annotation-spacing": "error",
        // "@typescript-eslint/unified-signatures": "error",

        // // scripts/eslint/rules
        // "object-literal-surrounding-space": "error",
        // "no-type-assertion-whitespace": "error",
        // "type-operator-spacing": "error",
        // "only-arrow-functions": ["error", {
        //     "allowNamedFunctions": true ,
        //     "allowDeclarations": true
        // }],
        // "no-double-space": "error",
        // "boolean-trivia": "error",
        // "no-in-operator": "error",
        // "simple-indent": "error",
        // "debug-assert": "error",
        // "no-keywords": "error",
        // "one-namespace-per-file": "error",


        // // eslint-plugin-jsdoc
        // "jsdoc/check-alignment": "error",

        // // eslint
        // "brace-style": ["error", "stroustrup", { "allowSingleLine": true }],
        // "constructor-super": "error",
        // "curly": ["error", "multi-line"],
        // "dot-notation": "error",
        // "eqeqeq": "error",
        // "linebreak-style": ["error", "windows"],
        // "new-parens": "error",
        // "no-caller": "error",
        // "no-duplicate-case": "error",
        // "no-duplicate-imports": "error",
        // "no-empty": "error",
        // "no-eval": "error",
        // "no-extra-bind": "error",
        // "no-fallthrough": "error",
        // "no-new-func": "error",
        // "no-new-wrappers": "error",
        // "no-return-await": "error",
        // "no-restricted-globals": ["error",
        //     { "name": "setTimeout" },
        //     { "name": "clearTimeout" },
        //     { "name": "setInterval" },
        //     { "name": "clearInterval" },
        //     { "name": "setImmediate" },
        //     { "name": "clearImmediate" }
        // ],
        // "no-sparse-arrays": "error",
        // "no-template-curly-in-string": "error",
        // "no-throw-literal": "error",
        // "no-trailing-spaces": "error",
        // "no-undef-init": "error",
        // "no-unsafe-finally": "error",
        // "no-unused-labels": "error",
        // "no-var": "error",
        // "object-shorthand": "error",
        // "prefer-const": "error",
        // "prefer-object-spread": "error",
        // "quote-props": ["error", "consistent-as-needed"],
        // "space-in-parens": "error",
        // "unicode-bom": ["error", "never"],
        // "use-isnan": "error"
    }
}
